- Methods in cf_composite_parent to verify.
- "cf_find_edge_route"
- Handling overlaps with CF shapes.
    - Create method called map shapes.
    - Travels along each shape checking for intersections with one another.
        - Checks if an overlap or touching.
        - If overlap add to the overlap method.
        - If touching add to the touching method.
    - Once this is done. Allows for shapes to be subtracted from effectively.
        - Also allows for more efficient plotting to be done in the future.
- in layer
    - create "generate_Core" & "remove_subtractions"

- replace static compsosite lists with a boolean composite check to see if its composite with a class var

- Check_for_intersection of shapes returns two extra varaibles. make sure to handle.
    - cf.id, outer.pt, outer,py, flag, inner_pt, inner_pt.

- Solder Mask can be a thin layer of copper on top. Not sure how to implement but food for thought....

- Additive overlaps:
    -CIR_CIR: Maintain cir1 and create a filled symmetrical arc.
    -CIR_FSA: Maintain cir1 and make a COM with a symprim as one edge. OR a FSA and a COM if both inner+outer overlap
    -CIR_COM: Maintain cir1 and change com.
    -CIR_POL:
    -FSA_FSA:
    -FSA_COM:
    -FSA_POL:
    -COM_COM:
    -COM_POL:
    -POL_POL:
- Subtractive overlaps:
    -CIR_CIR: Maintain cir1 and create a filled symmetrical arc.
    -CIR_FSA: Maintain cir1 and make a COM with a symprim as one edge. OR a FSA and a COM if both inner+outer overlap
    -CIR_COM: Maintain cir1 and change com.
    -CIR_POL:
    -FSA_FSA:
    -FSA_COM:
    -FSA_POL:
    -COM_COM:
    -COM_POL:
    -POL_POL:
- Intersection Detection:
   WRITTEN BUT NOT VERIFIED. USED CHAT FOR THE BULK TO GET SOMETHING
    -CIR_CIR:
    -CIR_FSA;
    -CIR_LIN:
    -CIR_PCS:
    -CIR_SAP:
    -FSA_FSA:
    -FSA_LIN:
    -FSA_PCS:
    -FSA_SAP:
    -LIN_LIN:
    -LIN_PCS:
    -LIN_SAP:
    -PCS_PCS:
    -PCS_SAP:
    -SAP_SAP:


- cf_map_shapes
- cf_generate_core_traces
- cf_remove_additive_overlaps
- cf_remove_subtractive_traces

- Finish Gerber
    - Finish main GERBER switcher.
- Finish CFMethods
    - Create Core traces
    - Populate modified additive traces by subtracting subtractive from additive
    - Do this logic based on what outfiles are present.
    - CFIntersection detection and handling for additive + subtractive
    - look at unit of the cf method, convert the unit before making outfile
- GCode.
    - Write primary traces to print additive
    - Write secondary traces to print core


Future:
- Handle in CFTraceLayer annotation traces and allowing for those to be implemented logicaly into additive(deph) settings.
- Add comments everywhere
- improve error messages...
- Roll own CF Parametric Cubic Spline solution to save from having to be dependent on package.
- Add a math config to add variables when calculating math. Currently values hardcoded. ;(
    -the number of samples from segment arc,
    -the number of samples from curves,
    -the number of samples from parametricCubSpline
- Update the logic behind circle segments when calculating distance too and from. Add some optimizations.
- Put Gerber Aperture Macro and Aperture types under one parent to allow for similar methods to be merged.
- Update gerber D01 arcs to handle edge cases
    - CF:"cf_determine_extreme_point" needs to be able to handle
        - CF shapes not touching... (happens if Aperture Macro has two seperated shapes)
        - Instances where there are two+ extreme points are at the same distance.
    - Update Gerber D01 Arcs to interpret all cf_determine_extreme_point returns.
- UPDATE CF:
    - Add a CF memory value that stores what cf shapes are touching that shape.

Future Future:
- Handle additve and subtractive gcode. 3D printing takes marlin. see what form others take.
- GCODE 3D print output should consider slicing with standard slicer settings, infil% etc.